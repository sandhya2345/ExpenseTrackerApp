@page "/debit-transaction"
@using m2.Models
@inject m2.Services.UserService UserService

<h1 class="text-center text-black mb-4">Add Debit Transaction</h1>

<div class="container mt-3">
    <div class="form-group mb-3">
        <label for="debitAmount" class="form-label">Debit Amount</label>
        <InputNumber id="debitAmount" @bind-Value="newDebitTransaction.Debit" class="form-control" placeholder="Enter debit amount" />
    </div>

    <div class="form-group mb-3">
        <label for="description" class="form-label">Description</label>
        <InputText id="description" @bind-Value="newDebitTransaction.Description" class="form-control" placeholder="Enter description" />
    </div>

    <!-- Tags Section -->
    <div class="form-group mb-3">
        <label for="tags" class="form-label">Select Tags</label>
        <select id="tags" @bind="selectedTag" class="form-control">
            <option value="">Select a tag...</option>
            @foreach (var tag in defaultTags)
            {
                <option value="@tag">@tag</option>
            }
        </select>
    </div>

    <div class="form-group mb-3">
        <label for="customTag" class="form-label">Add Custom Tag</label>
        <InputText id="customTag" @bind-Value="customTag" class="form-control" placeholder="Enter custom tag" />
    </div>

    <button class="btn btn-primary btn-lg w-100 mt-3" style="background-color: #4a148c; border-color: #4a148c;" @onclick="HandleDebitTransactionSubmit">Add Debit</button>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }

    <div class="mt-5">
        <h3 class="mt-4">Pending Debts</h3>

        <div class="table-responsive mt-3">
            <table class="table table-bordered table-hover align-middle">
                <thead class="table-dark">
                    <tr>
                        <th>Description</th>
                        <th>Amount</th>
                        <th>Date</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var debt in Data.Debts)
                    {
                        <tr class="@(!debt.IsCleared ? "table-warning" : "table-success")">
                            <td>
                                <strong>@debt.Description</strong>
                            </td>
                            <td>@debt.Amount:USD</td>
                            <td>@debt.Date.ToShortDateString()</td>
                            <td>
                                @if (!debt.IsCleared)
                                {
                                    <span class="badge bg-danger">Pending</span>
                                }
                                else
                                {
                                    <span class="badge bg-success">Cleared</span>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <button class="btn btn-success
btn-lg w-50
mt-3" @onclick="ClearDebts">
            Clear Pending Debts
        </button>

    </div>
</div>

@code {
    private Transaction newDebitTransaction = new Transaction();
    private AppData Data;
    private string errorMessage;
    private string selectedTag;
    private string customTag;

    // Default tags
    private List<string> defaultTags = new List<string>
    {
        "Yearly", "Monthly", "Food", "Drinks", "Clothes", "Gadgets", "Miscellaneous", "Fuel", "Rent", "EMI", "Party"
    };

    protected override void OnInitialized()
    {
        Data = UserService.LoadData();
    }

    private void HandleDebitTransactionSubmit()
    {
        var currentBalance = Data.Transactions.Sum(t => t.Credit) - Data.Transactions.Sum(t => t.Debit);

        if (currentBalance >= newDebitTransaction.Debit)
        {
            // Add new debit transaction
            AddDebitTransaction();
        }
        else
        {
            // Insufficient balance: Create a new debt
            var pendingAmount = newDebitTransaction.Debit - currentBalance;

            var newDebt = new Debt
            {
                Id = Data.Debts.Count + 1,
                Amount = pendingAmount,
                Description = $"Debt for transaction: {newDebitTransaction.Description}",
                Date = DateTime.Now,
                IsCleared = false
            };
            Data.Debts.Add(newDebt);

            // Add debit transaction covering the available balance
            newDebitTransaction.Debit = currentBalance;
            AddDebitTransaction();

            errorMessage = $"Insufficient balance. Debt of {pendingAmount:C} created.";
        }

        UserService.SaveData(Data);
        StateHasChanged();
    }

    private void AddDebitTransaction()
    {
        newDebitTransaction.Id = Data.Transactions.Count + 1;
        newDebitTransaction.Date = DateTime.Now;
        newDebitTransaction.Credit = 0;

        // Add selected tag
        if (!string.IsNullOrEmpty(selectedTag))
        {
            newDebitTransaction.Tags.Add(new Tag { Name = selectedTag });
        }

        Data.Transactions.Insert(0, newDebitTransaction);
        newDebitTransaction = new Transaction();
        selectedTag = string.Empty;
        customTag = string.Empty;
        errorMessage = string.Empty;
    }

    private void ClearDebts()
    {
        decimal availableInflows = Data.Transactions.Sum(t => t.Credit - t.Debit); // Calculate current inflows

        foreach (var debt in Data.Debts.Where(d => !d.IsCleared).ToList())
        {
            if (availableInflows >= debt.Amount)
            {
                // Fully clear the debt
                debt.IsCleared = true;
                availableInflows -= debt.Amount; // Deduct the debt amount from inflows

                // Add a clearing transaction
                var clearingTransaction = new Transaction
                    {
                        Id = Data.Transactions.Count + 1,
                        Credit = debt.Amount, 
                        Description = $"Cleared debt: {debt.Description}",
                        Date = DateTime.Now
                    };
                Data.Transactions.Add(clearingTransaction);
            }
            else
            {
                // Stop processing if inflows are insufficient
                break;
            }
        }

        UserService.SaveData(Data);
        StateHasChanged();
    }
}