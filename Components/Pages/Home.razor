@page "/"
@using m2.Models
@inject Services.UserService UserService
@inject Services.CurrencyService CurrencyService
@inject NavigationManager NavigationManager
@using System.Globalization

<div class="container mt-2">
    <h1 class="text-center mb-5 text-black">Dashboard</h1>
    <h3 class="mb-4">Welcome, <span class="text-black">Sandhya Timalsena</span>!</h3>

    <!-- Currency Selection -->
    <div class="mb-4">
        <label for="currencySelect" class="form-label">Select Currency</label>
        <select id="currencySelect" class="form-control" @bind="PreferredCurrency">
            <option value="USD">USD</option>
            <option value="NPR">NPR</option>
        </select>
    </div>

    <!-- Date Range Selection -->
    <div class="row mb-4 align-items-center">
        <div class="col-md-4">
            <label for="startDate" class="form-label">Start Date</label>
            <input type="date" id="startDate" class="form-control" @bind="startDate" />
        </div>
        <div class="col-md-4">
            <label for="endDate" class="form-label">End Date</label>
            <input type="date" id="endDate" class="form-control" @bind="endDate" />
        </div>
        <div class="col-md-4 text-center mt-4">
            <button class="btn" @onclick="FilterByDate" style="background-color: #4a148c; color: white;">Filter</button>
        </div>
    </div>



    <div class="row mb-4">
        <div class="col-md-3 mb-3">
            <div class="card text-center shadow border-0" style="background-color: #4a148c; color: #fff;">
                <div class="card-body">
                    <h5>Total Inflows</h5>
                    <h3>@(cashInflows.ToString("C", new CultureInfo(PreferredCurrency == "USD" ? "en-US" : "ne-NP")))</h3>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card text-center shadow border-0" style="background-color: #4a148c; color: #fff;">
                <div class="card-body">
                    <h5>Total Outflows</h5>
                    <h3>@(cashOutflows.ToString("C", new CultureInfo(PreferredCurrency == "USD" ? "en-US" : "ne-NP")))</h3>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card text-center shadow border-0" style="background-color: #4a148c; color: #fff;">
                <div class="card-body">
                    <h5>Remaining Debts</h5>
                    <h3>@(totalDebts.ToString("C", new CultureInfo(PreferredCurrency == "USD" ? "en-US" : "ne-NP")))</h3>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card text-center shadow border-0" style="background-color: #4a148c; color: #fff;">
                <div class="card-body">
                    <h5>Cleared Debts</h5>
                    <h3>@(clearedDebts.ToString("C", new CultureInfo(PreferredCurrency == "USD" ? "en-US" : "ne-NP")))</h3>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Highest Transactions -->
        <div class="col-md-6">
            <h4 class="text-black text-center">Highest Transactions</h4>
            <div class="table-responsive">
                <table class="table table-bordered">
                    <thead class="text-light" style="background-color: #4a148c;">
                        <tr>
                            <th>SN</th>
                            <th>Amount (@PreferredCurrency)</th>
                            <th>Type</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in highestTransactions)
                        {
                            <tr>
                                <td>@transaction.Id</td>
                                <td>@(transaction.Credit > 0 ? transaction.Credit : transaction.Debit):@PreferredCurrency</td>
                                <td>@(transaction.Credit > 0 ? "Credit" : "Debit")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Lowest Transactions -->
        <div class="col-md-6">
            <h4 class="text-black text-center">Lowest Transactions</h4>
            <div class="table-responsive">
                <table class="table table-bordered">
                    <thead class="text-light" style="background-color: #4a148c;">
                        <tr>
                            <th>SN</th>
                            <th>Amount (@PreferredCurrency)</th>
                            <th>Type</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in lowestTransactions)
                        {
                            <tr>
                                <td>@transaction.Id</td>
                                <td>@(transaction.Credit > 0 ? transaction.Credit : transaction.Debit):@PreferredCurrency</td>
                                <td>@(transaction.Credit > 0 ? "Credit" : "Debit")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Pending Debts -->
    <h2 class="mt-5 mb-4 text-black">Pending Debts</h2>
    <div class="table-responsive">
        <table class="table table-bordered">
            <thead class="text-light" style="background-color: #4a148c;">
                <tr>
                    <th>Description</th>
                    <th>Amount</th>
                    <th>Date</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var debt in filteredDebts)
                {
                    <tr>
                        <td>@debt.Description</td>
                        <td>@(debt.Amount * conversionRate):@PreferredCurrency</td>
                        <td>@debt.Date.ToString("MM/dd/yyyy")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- View All Transactions -->
    <div class="text-center mt-4">
        <a href="/transactions" class="btn btn-secondary" style="background-color: #4a148c; color: #fff; border: none;">View All Transactions</a>
    </div>
</div>

@code {
    private AppData Data;
    private decimal cashInflows;
    private decimal cashOutflows;
    private decimal totalDebts;
    private decimal clearedDebts;
    private List<Transaction> highestTransactions = new();
    private List<Transaction> lowestTransactions = new();
    private List<Debt> filteredDebts = new();
    private string PreferredCurrency = "USD"; // Default currency
    private DateTime startDate = DateTime.Now.AddMonths(-1); // Default to last month
    private DateTime endDate = DateTime.Now; // Default to today

    private decimal conversionRate = 1m; // Default to 1 for USD

    protected override async Task OnInitializedAsync()
    {
        if (Data == null)
        {
            Data = UserService.LoadData();

            if (string.IsNullOrEmpty(PreferredCurrency))
            {
                PreferredCurrency = Data.PreferredCurrency;
            }

            await FilterByDate();
        }
    }

    private async Task FilterByDate()
    {
        conversionRate = await CurrencyService.GetExchangeRateAsync("USD", PreferredCurrency);


        var filteredTransactions = Data.Transactions
            .Where(t => t.Date >= startDate && t.Date <= endDate)
            .ToList();

        highestTransactions = filteredTransactions
            .OrderByDescending(t => (t.Credit - t.Debit) * conversionRate)
            .Take(5)
            .Select(t => new Transaction
                {
                    Id = t.Id,
                    Credit = t.Credit * conversionRate,
                    Debit = t.Debit * conversionRate
                })
            .ToList();

        lowestTransactions = filteredTransactions
            .OrderBy(t => (t.Credit - t.Debit) * conversionRate)
            .Take(5)
            .Select(t => new Transaction
                {
                    Id = t.Id,
                    Credit = t.Credit * conversionRate,
                    Debit = t.Debit * conversionRate
                })
            .ToList();

        cashInflows = filteredTransactions.Sum(t => t.Credit) * conversionRate;
        cashOutflows = filteredTransactions.Sum(t => t.Debit) * conversionRate;

        filteredDebts = Data.Debts
            .Where(d => d.Date >= startDate && d.Date <= endDate && !d.IsCleared)
            .ToList();

        totalDebts = filteredDebts.Sum(d => d.Amount) * conversionRate;
        clearedDebts = Data.Debts.Where(d => d.IsCleared).Sum(d => d.Amount) * conversionRate;
    }
}
